  var _isSaying = false;
  var _isHidden = true;

  double _getImageHeight() {
    if (widget.step.description.length >= 140) {
      return Util.pageHeight(context) * RecipeStepWidget._imageSize * 0.9;
    }
    return Util.pageHeight(context) * RecipeStepWidget._imageSize;
  }

  Widget _buildFlipAnimation() {
    return GestureDetector(
      onTap: () => setState(() => _isHidden = !_isHidden),
      child: AnimatedSwitcher(
        duration: const Duration(milliseconds: 600),
        child: _isHidden ? _buildShortTimer() : _buildLongTimer(),
      ),
    );
  }

  Widget _buildShortTimer() {
    return Container(
      width: 70,
      height: 70,
      margin: const EdgeInsets.fromLTRB(0, 70, 0, 0),
      decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.horizontal(right: Radius.circular(20))),
      alignment: Alignment.center,
      child: const Icon(
        Icons.timer,
        color: Colors.black87,
        size: 30,
      ),
    );
  }

  Widget _buildLongTimer() {
    return Row(
      children: [
        Container(
          height: 70,
          width: 70 * 3,
          margin: const EdgeInsets.fromLTRB(0, 70, 0, 0),
          color: Colors.white,
        ),
        Container(
          width: 70,
          height: 70,
          margin: const EdgeInsets.fromLTRB(0, 70, 0, 0),
          decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.horizontal(right: Radius.circular(20))),
          alignment: Alignment.center,
          child: const Icon(
            Icons.timer,
            color: Colors.black87,
            size: 30,
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    if (_isSaying) {
      widget.onSayButton();
    }
    return Stack(children: [
      Container(
          padding: const EdgeInsets.all(Util.padding),
          child: Column(
            children: [
              HeaderPanel.buildButton(context, _buildSayIcon(),
                  !_isSaying ? Colors.white : Colors.white54),
              Container(
                margin: const EdgeInsets.fromLTRB(0, Util.margin, 0, 0),
                height: _getImageHeight(),
                child: ClipRRect(
                  borderRadius:
                      BorderRadius.circular(RecipeStepWidget._borderRadius),
                  child: Image(
                    image: AssetImage(widget.step.imgUrl),
                    fit: BoxFit.fitHeight,
                  ),
                ),
              ),
              Container(
                  alignment: Alignment.topCenter,
                  margin: const EdgeInsets.symmetric(
                      vertical: Util.margin, horizontal: 0),
                  child: Container(
                    decoration: BoxDecoration(
                        color: Colors.black87.withOpacity(
                            RecipeStepWidget._textBackgroundOpacity),
                        borderRadius: BorderRadius.circular(
                            RecipeStepWidget._borderRadius)),
                    // height: 120,
                    alignment: Alignment.center,
                    padding: const EdgeInsets.all(Util.padding),
                    child: Text(
                      widget.step.description,
                      style: TextStyle(
                          fontFamily: "Montserrat",
                          fontSize: Util.pageHeight(context) *
                              RecipeStepWidget._textSize,
                          color: Colors.white),
                    ),
                  )),
            ],
          )),
      _buildFlipAnimation()
    ]);
  }

  IconButton _buildSayIcon() {
    return IconButton(
        onPressed: () {
          setState(() {
            _isSaying = !_isSaying;
          });
          if (_isSaying) {
            widget.onSayButton();
          } else {
            widget.onStopButton();
          }
        },
        icon: _isSaying
            ? const Icon(
                Icons.pause,
                color: Colors.black87,
              )
            : const Icon(
                Icons.play_arrow,
                color: Colors.black87,
              ));
  }

  Widget _buildFlipAnimation() {
    return GestureDetector(
      onTap: () => setState(() => _isHidden = !_isHidden),
      child: AnimatedSwitcher(
        duration: const Duration(milliseconds: 600),
        child: _isHidden ? _buildShortTimer() : _buildLongTimer(),
      ),
    );
  }

  Widget _buildShortTimer() {
    return Container(
      width: 70,
      height: 70,
      margin: const EdgeInsets.fromLTRB(0, 70, 0, 0),
      decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.horizontal(right: Radius.circular(20))),
      alignment: Alignment.center,
      child: const Icon(
        Icons.timer,
        color: Colors.black87,
        size: 30,
      ),
    );
  }

  Widget _buildLongTimer() {
    return Row(
      children: [
        Container(
          height: 70,
          width: 70 * 3,
          margin: const EdgeInsets.fromLTRB(0, 70, 0, 0),
          color: Colors.white,
        ),
        Container(
          width: 70,
          height: 70,
          margin: const EdgeInsets.fromLTRB(0, 70, 0, 0),
          decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius:
                  BorderRadius.horizontal(right: Radius.circular(20))),
          alignment: Alignment.center,
          child: const Icon(
            Icons.timer,
            color: Colors.black87,
            size: 30,
          ),
        ),
      ],
    );
  }

            Container(
              padding: const EdgeInsets.all(Util.padding),
              child: Icon(
                Icons.timer_outlined,
                color: Colors.black87,
                size: _iconHeight * Util.pageHeight(context),
              ),
            ),